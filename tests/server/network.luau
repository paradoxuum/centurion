--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.23 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		SyncState = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestState = table.freeze({
			SetCallback = noop
		}),
		Execute = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)
export type Command = ({
	["description"]: ((string)?),
	["arguments"]: (({ ({
		["name"]: (string),
		["type"]: (string),
		["optional"]: ((boolean)?),
		["description"]: ((string)?),
		["num_args"]: (((string) | (number))?),
	}) })?),
	["guards"]: (({ (string) })?),
})
export type CommandMap = ({ [(string)]: ({
	["description"]: ((string)?),
	["arguments"]: (({ ({
		["name"]: (string),
		["type"]: (string),
		["optional"]: ((boolean)?),
		["description"]: ((string)?),
		["num_args"]: (((string) | (number))?),
	}) })?),
	["guards"]: (({ (string) })?),
}) })
export type Argument = ({
	["name"]: (string),
	["type"]: (string),
	["optional"]: ((boolean)?),
	["description"]: ((string)?),
	["num_args"]: (((string) | (number))?),
})
export type SyncPayload = ({
	["type"]: "init",
	["data"]: ({ [(string)]: ({
		["description"]: ((string)?),
		["arguments"]: (({ ({
			["name"]: (string),
			["type"]: (string),
			["optional"]: ((boolean)?),
			["description"]: ((string)?),
			["num_args"]: (((string) | (number))?),
		}) })?),
		["guards"]: (({ (string) })?),
	}) }),
} | {
	["type"]: "patch",
	["data"]: ({ [(string)]: ({
		["description"]: ((string)?),
		["arguments"]: (({ ({
			["name"]: (string),
			["type"]: (string),
			["optional"]: ((boolean)?),
			["description"]: ((string)?),
			["num_args"]: (((string) | (number))?),
		}) })?),
		["guards"]: (({ (string) })?),
	}) }),
})
export type ExecutionContext = ({
	["executor"]: (Player),
	["command"]: (string),
	["input"]: (string),
	["args"]: ({ (string) }),
	["response"]: (({
		["success"]: (boolean),
		["message"]: (string),
		["timestamp"]: (number),
	})?),
})

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			if reliable_events[0] then
				task.spawn(reliable_events[0], player, value)
			end
		elseif id == 1 then
			local call_id = buffer.readu8(buff, read(1))
			local value, value2
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value2 = {}
				local len_2 = buffer.readu16(incoming_buff, read(2))
				for i_1 = 1, len_2 do
					local val_1
					local len_3 = buffer.readu16(incoming_buff, read(2))
					val_1 = buffer.readstring(incoming_buff, read(len_3), len_3)
					value2[i_1] = val_1
				end
			else
				value2 = nil
			end
			if reliable_events[1] then
				task.spawn(function(player_2, call_id_2, value_1, value_2)
					local ret_1 = reliable_events[1](player_2, value_1, value_2)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					assert(ret_1["executor"]:IsA("Player"), "received instance is not of the Player class!")
					table.insert(outgoing_inst, ret_1["executor"])
					local len_4 = #ret_1["command"]
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, ret_1["command"], len_4)
					local len_5 = #ret_1["input"]
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					alloc(len_5)
					buffer.writestring(outgoing_buff, outgoing_apos, ret_1["input"], len_5)
					local len_6 = #ret_1["args"]
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
					for i_2 = 1, len_6 do
						local val_2 = ret_1["args"][i_2]
						local len_7 = #val_2
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
						alloc(len_7)
						buffer.writestring(outgoing_buff, outgoing_apos, val_2, len_7)
					end
					if ret_1["response"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, ret_1["response"]["success"] and 1 or 0)
						local len_8 = #ret_1["response"]["message"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_8)
						alloc(len_8)
						buffer.writestring(outgoing_buff, outgoing_apos, ret_1["response"]["message"], len_8)
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, ret_1["response"]["timestamp"])
					end
					player_map[player_2] = save()
				end, player, call_id, value, value2)
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	SyncState = {
		Fire = function(Player: Player, Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["type"] == "init" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				local len_pos_1 = alloc(2)
				local len_9 = 0
				for k_1, v_1 in Value["data"] do
					len_9 = len_9 + 1
					local len_10 = #k_1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_10)
					alloc(len_10)
					buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_10)
					if v_1["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_11 = #v_1["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
						alloc(len_11)
						buffer.writestring(outgoing_buff, outgoing_apos, v_1["description"], len_11)
					end
					if v_1["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_12 = #v_1["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_12)
						for i_3 = 1, len_12 do
							local val_3 = v_1["arguments"][i_3]
							local len_13 = #val_3["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_13)
							alloc(len_13)
							buffer.writestring(outgoing_buff, outgoing_apos, val_3["name"], len_13)
							local len_14 = #val_3["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_14)
							alloc(len_14)
							buffer.writestring(outgoing_buff, outgoing_apos, val_3["type"], len_14)
							if val_3["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3["optional"] and 1 or 0)
							end
							if val_3["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_15 = #val_3["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_15)
								alloc(len_15)
								buffer.writestring(outgoing_buff, outgoing_apos, val_3["description"], len_15)
							end
							local ty_name_1 = typeof(val_3["num_args"])
							if ty_name_1 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_16 = #val_3["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_16)
								alloc(len_16)
								buffer.writestring(outgoing_buff, outgoing_apos, val_3["num_args"], len_16)
							elseif ty_name_1 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_3["num_args"])
							elseif val_3["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_1["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_17 = #v_1["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_17)
						for i_4 = 1, len_17 do
							local val_4 = v_1["guards"][i_4]
							local len_18 = #val_4
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_18)
							alloc(len_18)
							buffer.writestring(outgoing_buff, outgoing_apos, val_4, len_18)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_9)
			elseif Value["type"] == "patch" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_2 = alloc(2)
				local len_19 = 0
				for k_2, v_2 in Value["data"] do
					len_19 = len_19 + 1
					local len_20 = #k_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_20)
					alloc(len_20)
					buffer.writestring(outgoing_buff, outgoing_apos, k_2, len_20)
					if v_2["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_21 = #v_2["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_21)
						alloc(len_21)
						buffer.writestring(outgoing_buff, outgoing_apos, v_2["description"], len_21)
					end
					if v_2["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_22 = #v_2["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_22)
						for i_5 = 1, len_22 do
							local val_5 = v_2["arguments"][i_5]
							local len_23 = #val_5["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_23)
							alloc(len_23)
							buffer.writestring(outgoing_buff, outgoing_apos, val_5["name"], len_23)
							local len_24 = #val_5["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
							alloc(len_24)
							buffer.writestring(outgoing_buff, outgoing_apos, val_5["type"], len_24)
							if val_5["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_5["optional"] and 1 or 0)
							end
							if val_5["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_25 = #val_5["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_25)
								alloc(len_25)
								buffer.writestring(outgoing_buff, outgoing_apos, val_5["description"], len_25)
							end
							local ty_name_2 = typeof(val_5["num_args"])
							if ty_name_2 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_26 = #val_5["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_26)
								alloc(len_26)
								buffer.writestring(outgoing_buff, outgoing_apos, val_5["num_args"], len_26)
							elseif ty_name_2 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_5["num_args"])
							elseif val_5["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_2["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_27 = #v_2["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_27)
						for i_6 = 1, len_27 do
							local val_6 = v_2["guards"][i_6]
							local len_28 = #val_6
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_28)
							alloc(len_28)
							buffer.writestring(outgoing_buff, outgoing_apos, val_6, len_28)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_19)
			else
				error("Invalid variant")
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["type"] == "init" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				local len_pos_3 = alloc(2)
				local len_29 = 0
				for k_3, v_3 in Value["data"] do
					len_29 = len_29 + 1
					local len_30 = #k_3
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_30)
					alloc(len_30)
					buffer.writestring(outgoing_buff, outgoing_apos, k_3, len_30)
					if v_3["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_31 = #v_3["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_31)
						alloc(len_31)
						buffer.writestring(outgoing_buff, outgoing_apos, v_3["description"], len_31)
					end
					if v_3["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_32 = #v_3["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_32)
						for i_7 = 1, len_32 do
							local val_7 = v_3["arguments"][i_7]
							local len_33 = #val_7["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_33)
							alloc(len_33)
							buffer.writestring(outgoing_buff, outgoing_apos, val_7["name"], len_33)
							local len_34 = #val_7["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_34)
							alloc(len_34)
							buffer.writestring(outgoing_buff, outgoing_apos, val_7["type"], len_34)
							if val_7["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_7["optional"] and 1 or 0)
							end
							if val_7["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_35 = #val_7["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_35)
								alloc(len_35)
								buffer.writestring(outgoing_buff, outgoing_apos, val_7["description"], len_35)
							end
							local ty_name_3 = typeof(val_7["num_args"])
							if ty_name_3 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_36 = #val_7["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_36)
								alloc(len_36)
								buffer.writestring(outgoing_buff, outgoing_apos, val_7["num_args"], len_36)
							elseif ty_name_3 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_7["num_args"])
							elseif val_7["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_3["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_37 = #v_3["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_37)
						for i_8 = 1, len_37 do
							local val_8 = v_3["guards"][i_8]
							local len_38 = #val_8
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_38)
							alloc(len_38)
							buffer.writestring(outgoing_buff, outgoing_apos, val_8, len_38)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_29)
			elseif Value["type"] == "patch" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_4 = alloc(2)
				local len_39 = 0
				for k_4, v_4 in Value["data"] do
					len_39 = len_39 + 1
					local len_40 = #k_4
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_40)
					alloc(len_40)
					buffer.writestring(outgoing_buff, outgoing_apos, k_4, len_40)
					if v_4["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_41 = #v_4["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_41)
						alloc(len_41)
						buffer.writestring(outgoing_buff, outgoing_apos, v_4["description"], len_41)
					end
					if v_4["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_42 = #v_4["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_42)
						for i_9 = 1, len_42 do
							local val_9 = v_4["arguments"][i_9]
							local len_43 = #val_9["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_43)
							alloc(len_43)
							buffer.writestring(outgoing_buff, outgoing_apos, val_9["name"], len_43)
							local len_44 = #val_9["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_44)
							alloc(len_44)
							buffer.writestring(outgoing_buff, outgoing_apos, val_9["type"], len_44)
							if val_9["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_9["optional"] and 1 or 0)
							end
							if val_9["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_45 = #val_9["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_45)
								alloc(len_45)
								buffer.writestring(outgoing_buff, outgoing_apos, val_9["description"], len_45)
							end
							local ty_name_4 = typeof(val_9["num_args"])
							if ty_name_4 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_46 = #val_9["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_46)
								alloc(len_46)
								buffer.writestring(outgoing_buff, outgoing_apos, val_9["num_args"], len_46)
							elseif ty_name_4 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_9["num_args"])
							elseif val_9["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_4["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_47 = #v_4["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_47)
						for i_10 = 1, len_47 do
							local val_10 = v_4["guards"][i_10]
							local len_48 = #val_10
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_48)
							alloc(len_48)
							buffer.writestring(outgoing_buff, outgoing_apos, val_10, len_48)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_4, len_39)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["type"] == "init" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				local len_pos_5 = alloc(2)
				local len_49 = 0
				for k_5, v_5 in Value["data"] do
					len_49 = len_49 + 1
					local len_50 = #k_5
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_50)
					alloc(len_50)
					buffer.writestring(outgoing_buff, outgoing_apos, k_5, len_50)
					if v_5["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_51 = #v_5["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_51)
						alloc(len_51)
						buffer.writestring(outgoing_buff, outgoing_apos, v_5["description"], len_51)
					end
					if v_5["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_52 = #v_5["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_52)
						for i_11 = 1, len_52 do
							local val_11 = v_5["arguments"][i_11]
							local len_53 = #val_11["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_53)
							alloc(len_53)
							buffer.writestring(outgoing_buff, outgoing_apos, val_11["name"], len_53)
							local len_54 = #val_11["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_54)
							alloc(len_54)
							buffer.writestring(outgoing_buff, outgoing_apos, val_11["type"], len_54)
							if val_11["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_11["optional"] and 1 or 0)
							end
							if val_11["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_55 = #val_11["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_55)
								alloc(len_55)
								buffer.writestring(outgoing_buff, outgoing_apos, val_11["description"], len_55)
							end
							local ty_name_5 = typeof(val_11["num_args"])
							if ty_name_5 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_56 = #val_11["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_56)
								alloc(len_56)
								buffer.writestring(outgoing_buff, outgoing_apos, val_11["num_args"], len_56)
							elseif ty_name_5 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_11["num_args"])
							elseif val_11["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_5["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_57 = #v_5["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_57)
						for i_12 = 1, len_57 do
							local val_12 = v_5["guards"][i_12]
							local len_58 = #val_12
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_58)
							alloc(len_58)
							buffer.writestring(outgoing_buff, outgoing_apos, val_12, len_58)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_5, len_49)
			elseif Value["type"] == "patch" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_6 = alloc(2)
				local len_59 = 0
				for k_6, v_6 in Value["data"] do
					len_59 = len_59 + 1
					local len_60 = #k_6
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_60)
					alloc(len_60)
					buffer.writestring(outgoing_buff, outgoing_apos, k_6, len_60)
					if v_6["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_61 = #v_6["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_61)
						alloc(len_61)
						buffer.writestring(outgoing_buff, outgoing_apos, v_6["description"], len_61)
					end
					if v_6["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_62 = #v_6["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_62)
						for i_13 = 1, len_62 do
							local val_13 = v_6["arguments"][i_13]
							local len_63 = #val_13["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_63)
							alloc(len_63)
							buffer.writestring(outgoing_buff, outgoing_apos, val_13["name"], len_63)
							local len_64 = #val_13["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_64)
							alloc(len_64)
							buffer.writestring(outgoing_buff, outgoing_apos, val_13["type"], len_64)
							if val_13["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_13["optional"] and 1 or 0)
							end
							if val_13["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_65 = #val_13["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_65)
								alloc(len_65)
								buffer.writestring(outgoing_buff, outgoing_apos, val_13["description"], len_65)
							end
							local ty_name_6 = typeof(val_13["num_args"])
							if ty_name_6 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_66 = #val_13["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_66)
								alloc(len_66)
								buffer.writestring(outgoing_buff, outgoing_apos, val_13["num_args"], len_66)
							elseif ty_name_6 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_13["num_args"])
							elseif val_13["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_6["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_67 = #v_6["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_67)
						for i_14 = 1, len_67 do
							local val_14 = v_6["guards"][i_14]
							local len_68 = #val_14
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_68)
							alloc(len_68)
							buffer.writestring(outgoing_buff, outgoing_apos, val_14, len_68)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_6, len_59)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["type"] == "init" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				local len_pos_7 = alloc(2)
				local len_69 = 0
				for k_7, v_7 in Value["data"] do
					len_69 = len_69 + 1
					local len_70 = #k_7
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_70)
					alloc(len_70)
					buffer.writestring(outgoing_buff, outgoing_apos, k_7, len_70)
					if v_7["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_71 = #v_7["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_71)
						alloc(len_71)
						buffer.writestring(outgoing_buff, outgoing_apos, v_7["description"], len_71)
					end
					if v_7["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_72 = #v_7["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_72)
						for i_15 = 1, len_72 do
							local val_15 = v_7["arguments"][i_15]
							local len_73 = #val_15["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_73)
							alloc(len_73)
							buffer.writestring(outgoing_buff, outgoing_apos, val_15["name"], len_73)
							local len_74 = #val_15["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_74)
							alloc(len_74)
							buffer.writestring(outgoing_buff, outgoing_apos, val_15["type"], len_74)
							if val_15["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_15["optional"] and 1 or 0)
							end
							if val_15["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_75 = #val_15["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_75)
								alloc(len_75)
								buffer.writestring(outgoing_buff, outgoing_apos, val_15["description"], len_75)
							end
							local ty_name_7 = typeof(val_15["num_args"])
							if ty_name_7 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_76 = #val_15["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_76)
								alloc(len_76)
								buffer.writestring(outgoing_buff, outgoing_apos, val_15["num_args"], len_76)
							elseif ty_name_7 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_15["num_args"])
							elseif val_15["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_7["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_77 = #v_7["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_77)
						for i_16 = 1, len_77 do
							local val_16 = v_7["guards"][i_16]
							local len_78 = #val_16
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_78)
							alloc(len_78)
							buffer.writestring(outgoing_buff, outgoing_apos, val_16, len_78)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_7, len_69)
			elseif Value["type"] == "patch" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_8 = alloc(2)
				local len_79 = 0
				for k_8, v_8 in Value["data"] do
					len_79 = len_79 + 1
					local len_80 = #k_8
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_80)
					alloc(len_80)
					buffer.writestring(outgoing_buff, outgoing_apos, k_8, len_80)
					if v_8["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_81 = #v_8["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_81)
						alloc(len_81)
						buffer.writestring(outgoing_buff, outgoing_apos, v_8["description"], len_81)
					end
					if v_8["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_82 = #v_8["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_82)
						for i_17 = 1, len_82 do
							local val_17 = v_8["arguments"][i_17]
							local len_83 = #val_17["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_83)
							alloc(len_83)
							buffer.writestring(outgoing_buff, outgoing_apos, val_17["name"], len_83)
							local len_84 = #val_17["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_84)
							alloc(len_84)
							buffer.writestring(outgoing_buff, outgoing_apos, val_17["type"], len_84)
							if val_17["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_17["optional"] and 1 or 0)
							end
							if val_17["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_85 = #val_17["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_85)
								alloc(len_85)
								buffer.writestring(outgoing_buff, outgoing_apos, val_17["description"], len_85)
							end
							local ty_name_8 = typeof(val_17["num_args"])
							if ty_name_8 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_86 = #val_17["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_86)
								alloc(len_86)
								buffer.writestring(outgoing_buff, outgoing_apos, val_17["num_args"], len_86)
							elseif ty_name_8 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_17["num_args"])
							elseif val_17["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_8["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_87 = #v_8["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_87)
						for i_18 = 1, len_87 do
							local val_18 = v_8["guards"][i_18]
							local len_88 = #val_18
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_88)
							alloc(len_88)
							buffer.writestring(outgoing_buff, outgoing_apos, val_18, len_88)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_8, len_79)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["type"] == "init" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				local len_pos_9 = alloc(2)
				local len_89 = 0
				for k_9, v_9 in Value["data"] do
					len_89 = len_89 + 1
					local len_90 = #k_9
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_90)
					alloc(len_90)
					buffer.writestring(outgoing_buff, outgoing_apos, k_9, len_90)
					if v_9["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_91 = #v_9["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_91)
						alloc(len_91)
						buffer.writestring(outgoing_buff, outgoing_apos, v_9["description"], len_91)
					end
					if v_9["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_92 = #v_9["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_92)
						for i_19 = 1, len_92 do
							local val_19 = v_9["arguments"][i_19]
							local len_93 = #val_19["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_93)
							alloc(len_93)
							buffer.writestring(outgoing_buff, outgoing_apos, val_19["name"], len_93)
							local len_94 = #val_19["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_94)
							alloc(len_94)
							buffer.writestring(outgoing_buff, outgoing_apos, val_19["type"], len_94)
							if val_19["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_19["optional"] and 1 or 0)
							end
							if val_19["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_95 = #val_19["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_95)
								alloc(len_95)
								buffer.writestring(outgoing_buff, outgoing_apos, val_19["description"], len_95)
							end
							local ty_name_9 = typeof(val_19["num_args"])
							if ty_name_9 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_96 = #val_19["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_96)
								alloc(len_96)
								buffer.writestring(outgoing_buff, outgoing_apos, val_19["num_args"], len_96)
							elseif ty_name_9 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_19["num_args"])
							elseif val_19["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_9["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_97 = #v_9["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_97)
						for i_20 = 1, len_97 do
							local val_20 = v_9["guards"][i_20]
							local len_98 = #val_20
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_98)
							alloc(len_98)
							buffer.writestring(outgoing_buff, outgoing_apos, val_20, len_98)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_9, len_89)
			elseif Value["type"] == "patch" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_10 = alloc(2)
				local len_99 = 0
				for k_10, v_10 in Value["data"] do
					len_99 = len_99 + 1
					local len_100 = #k_10
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_100)
					alloc(len_100)
					buffer.writestring(outgoing_buff, outgoing_apos, k_10, len_100)
					if v_10["description"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_101 = #v_10["description"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_101)
						alloc(len_101)
						buffer.writestring(outgoing_buff, outgoing_apos, v_10["description"], len_101)
					end
					if v_10["arguments"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_102 = #v_10["arguments"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_102)
						for i_21 = 1, len_102 do
							local val_21 = v_10["arguments"][i_21]
							local len_103 = #val_21["name"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_103)
							alloc(len_103)
							buffer.writestring(outgoing_buff, outgoing_apos, val_21["name"], len_103)
							local len_104 = #val_21["type"]
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_104)
							alloc(len_104)
							buffer.writestring(outgoing_buff, outgoing_apos, val_21["type"], len_104)
							if val_21["optional"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_21["optional"] and 1 or 0)
							end
							if val_21["description"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								local len_105 = #val_21["description"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_105)
								alloc(len_105)
								buffer.writestring(outgoing_buff, outgoing_apos, val_21["description"], len_105)
							end
							local ty_name_10 = typeof(val_21["num_args"])
							if ty_name_10 == "string" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
								local len_106 = #val_21["num_args"]
								alloc(2)
								buffer.writeu16(outgoing_buff, outgoing_apos, len_106)
								alloc(len_106)
								buffer.writestring(outgoing_buff, outgoing_apos, val_21["num_args"], len_106)
							elseif ty_name_10 == "number" then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								alloc(1)
								buffer.writei8(outgoing_buff, outgoing_apos, val_21["num_args"])
							elseif val_21["num_args"] == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 2)
							else
								error("Invalid type")
							end
						end
					end
					if v_10["guards"] == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_107 = #v_10["guards"]
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_107)
						for i_22 = 1, len_107 do
							local val_22 = v_10["guards"][i_22]
							local len_108 = #val_22
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_108)
							alloc(len_108)
							buffer.writestring(outgoing_buff, outgoing_apos, val_22, len_108)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_10, len_99)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RequestState = {
		SetCallback = function(Callback: (Player: Player) -> ()): () -> ()
			reliable_events[0] = Callback
			return function()
				reliable_events[0] = nil
			end
		end,
	},
	Execute = {
		SetCallback = function(Callback: (Player: Player, Command: (string), Args: (({ (string) })?)) -> (({
			["executor"]: (Player),
			["command"]: (string),
			["input"]: (string),
			["args"]: ({ (string) }),
			["response"]: (({
				["success"]: (boolean),
				["message"]: (string),
				["timestamp"]: (number),
			})?),
		}))): () -> ()
			reliable_events[1] = Callback
			return function()
				reliable_events[1] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
