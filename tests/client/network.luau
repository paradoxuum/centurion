--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.23 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		SyncState = table.freeze({
			SetCallback = noop
		}),
		RequestState = table.freeze({
			Fire = noop
		}),
		Execute = table.freeze({
			Call = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

export type Command = ({
	["description"]: ((string)?),
	["arguments"]: (({ ({
		["name"]: (string),
		["type"]: (string),
		["optional"]: ((boolean)?),
		["description"]: ((string)?),
		["num_args"]: (((string) | (number))?),
	}) })?),
	["guards"]: (({ (string) })?),
})
export type CommandMap = ({ [(string)]: ({
	["description"]: ((string)?),
	["arguments"]: (({ ({
		["name"]: (string),
		["type"]: (string),
		["optional"]: ((boolean)?),
		["description"]: ((string)?),
		["num_args"]: (((string) | (number))?),
	}) })?),
	["guards"]: (({ (string) })?),
}) })
export type Argument = ({
	["name"]: (string),
	["type"]: (string),
	["optional"]: ((boolean)?),
	["description"]: ((string)?),
	["num_args"]: (((string) | (number))?),
})
export type SyncPayload = ({
	["type"]: "init",
	["data"]: ({ [(string)]: ({
		["description"]: ((string)?),
		["arguments"]: (({ ({
			["name"]: (string),
			["type"]: (string),
			["optional"]: ((boolean)?),
			["description"]: ((string)?),
			["num_args"]: (((string) | (number))?),
		}) })?),
		["guards"]: (({ (string) })?),
	}) }),
} | {
	["type"]: "patch",
	["data"]: ({ [(string)]: ({
		["description"]: ((string)?),
		["arguments"]: (({ ({
			["name"]: (string),
			["type"]: (string),
			["optional"]: ((boolean)?),
			["description"]: ((string)?),
			["num_args"]: (((string) | (number))?),
		}) })?),
		["guards"]: (({ (string) })?),
	}) }),
})
export type ExecutionContext = ({
	["executor"]: (Player),
	["command"]: (string),
	["input"]: (string),
	["args"]: ({ (string) }),
	["response"]: (({
		["success"]: (boolean),
		["message"]: (string),
		["timestamp"]: (number),
	})?),
})

local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
local reliable_event_queue: { [number]: { any } } = table.create(2)
local function_call_id = 0
reliable_event_queue[0] = {}
reliable_event_queue[1] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value["type"] = "init"
				value["data"] = {}
				for _ = 1, buffer.readu16(incoming_buff, read(2)) do
					local key_1
					local val_1
					local len_1 = buffer.readu16(incoming_buff, read(2))
					key_1 = buffer.readstring(incoming_buff, read(len_1), len_1)
					val_1 = {}
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						local len_2 = buffer.readu16(incoming_buff, read(2))
						val_1["description"] = buffer.readstring(incoming_buff, read(len_2), len_2)
					else
						val_1["description"] = nil
					end
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_1["arguments"] = {}
						local len_3 = buffer.readu16(incoming_buff, read(2))
						for i_1 = 1, len_3 do
							local val_2
							val_2 = {}
							local len_4 = buffer.readu16(incoming_buff, read(2))
							val_2["name"] = buffer.readstring(incoming_buff, read(len_4), len_4)
							local len_5 = buffer.readu16(incoming_buff, read(2))
							val_2["type"] = buffer.readstring(incoming_buff, read(len_5), len_5)
							if buffer.readu8(incoming_buff, read(1)) == 1 then
								val_2["optional"] = buffer.readu8(incoming_buff, read(1)) == 1
							else
								val_2["optional"] = nil
							end
							if buffer.readu8(incoming_buff, read(1)) == 1 then
								local len_6 = buffer.readu16(incoming_buff, read(2))
								val_2["description"] = buffer.readstring(incoming_buff, read(len_6), len_6)
							else
								val_2["description"] = nil
							end
							local ty_i_1 = buffer.readu8(incoming_buff, read(1))
							if ty_i_1 == 0 then
								local len_7 = buffer.readu16(incoming_buff, read(2))
								val_2["num_args"] = buffer.readstring(incoming_buff, read(len_7), len_7)
							elseif ty_i_1 == 1 then
								val_2["num_args"] = buffer.readi8(incoming_buff, read(1))
							elseif ty_i_1 == 2 then
								val_2["num_args"] = nil
							else
								error("Invalid enumerator")
							end
							val_1["arguments"][i_1] = val_2
						end
					else
						val_1["arguments"] = nil
					end
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_1["guards"] = {}
						local len_8 = buffer.readu16(incoming_buff, read(2))
						for i_2 = 1, len_8 do
							local val_3
							local len_9 = buffer.readu16(incoming_buff, read(2))
							val_3 = buffer.readstring(incoming_buff, read(len_9), len_9)
							val_1["guards"][i_2] = val_3
						end
					else
						val_1["guards"] = nil
					end
					value["data"][key_1] = val_1
				end
			elseif enum_value_1 == 1 then
				value["type"] = "patch"
				value["data"] = {}
				for _ = 1, buffer.readu16(incoming_buff, read(2)) do
					local key_2
					local val_4
					local len_10 = buffer.readu16(incoming_buff, read(2))
					key_2 = buffer.readstring(incoming_buff, read(len_10), len_10)
					val_4 = {}
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						local len_11 = buffer.readu16(incoming_buff, read(2))
						val_4["description"] = buffer.readstring(incoming_buff, read(len_11), len_11)
					else
						val_4["description"] = nil
					end
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_4["arguments"] = {}
						local len_12 = buffer.readu16(incoming_buff, read(2))
						for i_3 = 1, len_12 do
							local val_5
							val_5 = {}
							local len_13 = buffer.readu16(incoming_buff, read(2))
							val_5["name"] = buffer.readstring(incoming_buff, read(len_13), len_13)
							local len_14 = buffer.readu16(incoming_buff, read(2))
							val_5["type"] = buffer.readstring(incoming_buff, read(len_14), len_14)
							if buffer.readu8(incoming_buff, read(1)) == 1 then
								val_5["optional"] = buffer.readu8(incoming_buff, read(1)) == 1
							else
								val_5["optional"] = nil
							end
							if buffer.readu8(incoming_buff, read(1)) == 1 then
								local len_15 = buffer.readu16(incoming_buff, read(2))
								val_5["description"] = buffer.readstring(incoming_buff, read(len_15), len_15)
							else
								val_5["description"] = nil
							end
							local ty_i_2 = buffer.readu8(incoming_buff, read(1))
							if ty_i_2 == 0 then
								local len_16 = buffer.readu16(incoming_buff, read(2))
								val_5["num_args"] = buffer.readstring(incoming_buff, read(len_16), len_16)
							elseif ty_i_2 == 1 then
								val_5["num_args"] = buffer.readi8(incoming_buff, read(1))
							elseif ty_i_2 == 2 then
								val_5["num_args"] = nil
							else
								error("Invalid enumerator")
							end
							val_4["arguments"][i_3] = val_5
						end
					else
						val_4["arguments"] = nil
					end
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_4["guards"] = {}
						local len_17 = buffer.readu16(incoming_buff, read(2))
						for i_4 = 1, len_17 do
							local val_6
							local len_18 = buffer.readu16(incoming_buff, read(2))
							val_6 = buffer.readstring(incoming_buff, read(len_18), len_18)
							val_4["guards"][i_4] = val_6
						end
					else
						val_4["guards"] = nil
					end
					value["data"][key_2] = val_4
				end
			else
				error("Invalid variant")
			end
			if reliable_events[0] then
				task.spawn(reliable_events[0], value)
			else
				table.insert(reliable_event_queue[0], value)
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for SyncState. Did you forget to attach a listener?`)
				end
			end
		elseif id == 1 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			incoming_ipos = incoming_ipos + 1
			value["executor"] = incoming_inst[incoming_ipos]
			assert(value["executor"] ~= nil, "received instance is nil!")
			assert(value["executor"]:IsA("Player"), "received instance is not of the Player class!")
			local len_19 = buffer.readu16(incoming_buff, read(2))
			value["command"] = buffer.readstring(incoming_buff, read(len_19), len_19)
			local len_20 = buffer.readu16(incoming_buff, read(2))
			value["input"] = buffer.readstring(incoming_buff, read(len_20), len_20)
			value["args"] = {}
			local len_21 = buffer.readu16(incoming_buff, read(2))
			for i_5 = 1, len_21 do
				local val_7
				local len_22 = buffer.readu16(incoming_buff, read(2))
				val_7 = buffer.readstring(incoming_buff, read(len_22), len_22)
				value["args"][i_5] = val_7
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value["response"] = {}
				value["response"]["success"] = buffer.readu8(incoming_buff, read(1)) == 1
				local len_23 = buffer.readu16(incoming_buff, read(2))
				value["response"]["message"] = buffer.readstring(incoming_buff, read(len_23), len_23)
				value["response"]["timestamp"] = buffer.readu32(incoming_buff, read(4))
			else
				value["response"] = nil
			end
			local thread = reliable_event_queue[1][call_id]
			-- When using actors it's possible for multiple Zap clients to exist, but only one called the Zap remote function.
			if thread then
				task.spawn(thread, value)
			end
			reliable_event_queue[1][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	SyncState = {
		SetCallback = function(Callback: (Value: ({
			["type"]: "init",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		} | {
			["type"]: "patch",
			["data"]: ({ [(string)]: ({
				["description"]: ((string)?),
				["arguments"]: (({ ({
					["name"]: (string),
					["type"]: (string),
					["optional"]: ((boolean)?),
					["description"]: ((string)?),
					["num_args"]: (((string) | (number))?),
				}) })?),
				["guards"]: (({ (string) })?),
			}) }),
		})) -> ()): () -> ()
			reliable_events[0] = Callback
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[0] = {}
			return function()
				reliable_events[0] = nil
			end
		end,
	},
	RequestState = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
		end,
	},
	Execute = {
		Call = function(Command: (string), Args: (({ (string) })?)): (({
			["executor"]: (Player),
			["command"]: (string),
			["input"]: (string),
			["args"]: ({ (string) }),
			["response"]: (({
				["success"]: (boolean),
				["message"]: (string),
				["timestamp"]: (number),
			})?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			function_call_id += 1
			function_call_id %= 256
			if reliable_event_queue[1][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local len_24 = #Command
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
			alloc(len_24)
			buffer.writestring(outgoing_buff, outgoing_apos, Command, len_24)
			if Args == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_25 = #Args
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_25)
				for i_6 = 1, len_25 do
					local val_8 = Args[i_6]
					local len_26 = #val_8
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_26)
					alloc(len_26)
					buffer.writestring(outgoing_buff, outgoing_apos, val_8, len_26)
				end
			end
			reliable_event_queue[1][function_call_id] = coroutine.running()
			return coroutine.yield()
		end,
	},
}
type Events = typeof(returns)
return returns
